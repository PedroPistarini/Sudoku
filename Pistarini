TITLE Pedro Di Grazia (22002293), Pedro Pistarini (22000341)

.model small

;Pula linha
pula_linha macro

    mov ah, 02
    mov dl, 10
    int 21h

endm

;<space> teclado
espaco macro

    mov ah, 02
    mov dl, 32
    int 21h

endm

; Limpa tela
limpa_tela macro

    mov ah, 00h
    mov al, 03h
    int 10h                      
    mov cx, 02h

    mov dh,1
    mov dl,1
    mov ah,02h
    int 10h

endm

.stack 100h
.data
    
    ; Variaveis
    coluna db ?
    linha db ?
    valor db ?
    dificuldade db ?
    matriz db ?
    matriz_resposta db ?

    ; Cabeçalho
    Titulo db     '<------------------------------- Sudoku - Assembly ----------------------------> $'
    cabecalho db  '============================================================================== $'
    

    ; Regras
    regras1 db ,13,' 1- SUDOKU eh um jogo de raciocinio e logica! $'
    regras2 db ,13,' 2- Complete os " espaços " uilizando numeros de 1 a 9. $'
    regras3 db ,13,' 3- Seguinte regra: Nao podem haver numeros repetidos nas linhas horizontais e  verticais $'
    press db '  ->Pressione qualquer tecla para comecar!, Boa sorte!$'

    ; Dificuldade
    seleciona_dificuldade db ,13,10, '-> Selecione um nivel de dificuldade! $'
    dificuldade_facil db ,13,10, '[01] - Facil $'
    dificuldade_medio db '[02] - Medio $'
    dificuldade_dificil db '[03] - Dificil $'
    pressione_um_numero db,13,10, 'Selecione um numero de 1 a 3: $'


    ; Altera os valores
    altera_coluna db '-> Digite a coluna a ser alterada : $'
    altera_linha db '-> Digite a linha a ser alterada (1 a 9): $'
    altera_valor1 db '-> Digite valor para ser alterado (1 a 9): $'


    ; Validação 
    ja_possui db '-> Ja possui esse valor nessa posicao! $'

    ; Encerramento
    encerramento db ,13,10, '-> Se quiser encerrar aperte <enter> se nao, aperte qualquer tecla! $'
    obrigado db ,13,10, '-> Obrigado por jogar!$'
    resposta db ,13,10, ' -- RESPOSTA --: $'
    vencedor db ,13,10,' -- PARABENS VOCÊ CONSEGUIU -- $'
    jogar_novamente db ,13,10, '-> Deseja jogar novamente? [s / n]: $'
  
    
    ; Criação do Sudoku nivel Fácil
    letras_colunas_facil db ,13,10,'                        a   b    c   d $'
    matriz_facil            db '    $'
                            db '42  $'
                            db ' 31 $'
                            db '    $'

    matriz_resposta_facil   db '3142$'
                            db '4231$'
                            db '2314$'
                            db '1423$'
    


    ; Criação da sudoku de nivel Médio
    letras_colunas db ,13,10,'                        a   b   c    d   e   f    g   h   i $'
    matriz_medio            db  '1  3  92 $'
                            db  '3  4  85 $'
                            db  '6  9 1 7 $'
                            db  '479 1    $'
                            db  '  2 6 1  $'
                            db  ' 162 9 37$'
                            db  ' 5 8 7  2$'
                            db  ' 84  2  3$'
                            db  ' 63  5  9$'

    matriz_resposta_medio   db  '145378926$'
                            db  '397426851$'
                            db  '628951374$'
                            db  '479513268$'
                            db  '832764195$'
                            db  '516289437$'
                            db  '951837642$'
                            db  '784692513$'
                            db  '263145789$'


    matriz_dificil          db  '4       6$'
                            db  ' 3     8 $'
                            db  '  9   7  $'
                            db  '   7 1   $'
                            db  '    3    $'
                            db  '   9 4   $'
                            db  '  8   5  $'
                            db  ' 4     6 $'
                            db  '3       9$'


    matriz_resposta_dificil db  '415378296$'
                            db  '237169485$'
                            db  '689425731$'
                            db  '893751624$'
                            db  '574236918$'
                            db  '162984257$'
                            db  '928617543$'
                            db  '741593862$'
                            db  '366842179$'
                    
.code

;Espaço 30px
    espacao proc

        xor di,di
        mov di, 20

        volta:

        espaco              ; Loop para dar 30 espacos juntos, utilizado para estetica

        dec di
        cmp di, 0
        jne volta

    ret
    espacao endp

; Imprime Matriz
    imp_matriz_facil proc

        xor bx, bx
        xor si, si

        mov ch, 4                               ; Contador de linhas                         
        xor dh,dh

        outra_linha1:
        
            mov cl, 4                       ; Contador de colunas
            xor si, si    

                call espacao

                inc dh
                mov dl,dh
                add dl, 30h                 ; Printando Numeros das linhas
                mov ah, 02

                int 21h
                mov ah,02
                mov dl, '>'
                int 21h

                espaco
                
                
                outra_coluna1:   

                    mov ah, 02
                    mov dl, '|'
                    int 21h

                    mov ah, 02                  ; Printando numeros
                    mov dl, matriz_facil[bx][si]                    
                    int 21h                         
                  
                    mov ah, 02
                    mov dl, '|'
                    int 21h

                    espaco
                    
                    cmp cl, 3
                    jne espac1

                        espaco

                    espac1:

                    inc si                      ; passando para a proximo numero
                    dec cl                      ; Decrementa cl ( linha )
                
                jnz outra_coluna1            ; Quando for 0 pula linha
           
            inc bx                      ; Adiciona 1 em bx = Linhas
                        
            pula_linha

            cmp ch, 3
            jne pula_pula1

                pula_linha

            pula_pula1:

            add bx, 4                    ; Adiciona para entender que estou indo para proxima linha
            dec ch                      ; Tira 1 do contador de linhas
            
        jnz outra_linha1       
    
    ret
    imp_matriz_facil endp

; Imprime Matriz Resposta
    imp_matriz_resposta_facil proc

        
        xor bx, bx
        xor si, si

        mov ch, 4                               ; Contador de linhas                         
        xor dh,dh

        outra_linha0001:
        
            mov cl, 4                       ; Contador de colunas
            xor si, si    

                call espacao

                inc dh
                mov dl,dh
                add dl, 30h
                mov ah, 02
                int 21h
                mov ah,02
                mov dl, '>'
                int 21h

                espaco
                 
                
                outra_coluna0001:   

                    mov ah, 02
                    mov dl, '|'
                    int 21h

                    mov ah, 02                 ; Printando numeros
                    mov dl, matriz_resposta_facil[bx][si]                    
                    int 21h                         
                
                    mov ah, 02
                    mov dl, '|'
                    int 21h

                    espaco
                    
                    cmp cl, 3
                    jne espac

                        espaco

                    espac:

                     
                    
                    inc si                      ; passando para a proximo numero
                    dec cl                      ; Decrementa cl ( linha )
                
                jnz outra_coluna0001            ; Quando for 0 pula linha
           
            inc bx                      ; Adiciona 1 em bx = Linhas
                        
        
            pula_linha

            cmp ch, 3
            jne pula_pula

                pula_linha
            
            pula_pula:

            add bx, 4                    ; Adiciona para entender que estou indo para proxima linha
            dec ch                      ; Tira 1 do contador de linhas
            
        jnz outra_linha0001       
    
    ret
    imp_matriz_resposta_facil endp

; Função de impressão de matrizes
    imp_matriz_medio proc

        xor bx, bx
        xor si, si

        mov ch, 9                              ; Contador de linhas                         
        xor dh,dh

        outra_linha001:
        
            mov cl, 9                       ; Contador de colunas
            xor si, si    

                call espacao

                inc dh
                mov dl,dh
                add dl, 30h
                mov ah, 02
                int 21h
                mov ah,02
                mov dl, '>'
                int 21h

                espaco
                
                
                outra_coluna001:   

                    mov ah, 02
                    mov dl, '|'
                    int 21h

                    mov ah, 02                 ; Printando numeros
                    mov dl, matriz_medio[bx][si]                    
                    int 21h      
      
                    mov ah, 02
                    mov dl, '|'
                    int 21h

                    espaco

                    cmp cl, 7
                    jne estetica

                        espaco

                    estetica:

                    cmp cl, 4
                    jne estetica1

                        espaco

                    estetica1:

                    inc si                      ; passando para a proximo numero
                    dec cl                      ; Decrementa cl ( linha )
                
                jnz outra_coluna001            ; Quando for 0 pula linha
           
            inc bx                      ; Adiciona 1 em bx = Linhas
                        
            pula_linha

            cmp ch, 7
            jne estetica2

                pula_linha

            estetica2:

            cmp ch, 4
            jne estetica02

                pula_linha

            estetica02:

            add bx, 9                   ; Adiciona para entender que estou indo para proxima linha
            dec ch                      ; Tira 1 do contador de linhas
            
        jnz outra_linha001       
    
    ret
    imp_matriz_medio endp

; Função de impressão de matrizes resposta
    imp_matriz_resposta_medio proc

        xor bx, bx
        xor si, si

        mov ch, 9                               ; Contador de linhas                         
        xor dh,dh

        outra_linha01:
        
            mov cl, 9                       ; Contador de colunas
            xor si, si    

                call espacao

                inc dh
                mov dl,dh
                add dl, 30h             ; Adiconando linhas
                mov ah, 02
                int 21h

                mov ah,02
                mov dl, '>'             ; Print '>'
                int 21h

                espaco
                 
                
                outra_coluna01:   

                    mov ah, 02
                    mov dl, '|'
                    int 21h

                    mov ah, 02                 
                    mov dl, matriz_resposta_medio[bx][si]        ; Printando valores armazenados            
                    int 21h                         
                  
                    mov ah, 02
                    mov dl, '|'
                    int 21h
                    
                    espaco

                    cmp cl, 7
                    jne estetica01

                        espaco

                    estetica01:

                    cmp cl, 4
                    jne estetica001

                        espaco
                        
                    estetica001:
                    
                    inc si                      ; passando para a proximo numero
                    dec cl                      ; Decrementa cl ( linha )
                
                jnz outra_coluna01            ; Quando for 0 pula linha
           
            inc bx                      ; Adiciona 1 em bx = Linhas

            pula_linha

            cmp ch, 7
            jne estetica002

                pula_linha

            estetica002:

            cmp ch, 4
            jne estetica0002

                pula_linha

            estetica0002:
            
            add bx, 9                   ; Adiciona para entender que estou indo para proxima linha
            dec ch                      ; Tira 1 do contador de linhas
            
        jnz outra_linha01       
    
        ret
    imp_matriz_resposta_medio endp

; Função de impressão de matrizes
    imp_matriz_dificil proc

        xor bx, bx
        xor si, si

        mov ch, 9                              ; Contador de linhas                         
        xor dh,dh

        outra_linha10:
        
            mov cl, 9                       ; Contador de colunas
            xor si, si    

                call espacao

                inc dh
                mov dl,dh
                add dl, 30h
                mov ah, 02
                int 21h
                mov ah,02
                mov dl, '>'
                int 21h

                espaco
                
                
                outra_coluna10:   

                    mov ah, 02
                    mov dl, '|'
                    int 21h

                    mov ah, 02                 ; Printando numeros
                    mov dl, matriz_dificil[bx][si]                    
                    int 21h      
      
                    mov ah, 02
                    mov dl, '|'
                    int 21h

                    espaco

                    cmp cl, 7
                    jne esteticaa

                        espaco

                    esteticaa:

                    cmp cl, 4
                    jne estetica1a

                        espaco

                    estetica1a:

                    inc si                      ; passando para a proximo numero
                    dec cl                      ; Decrementa cl ( linha )
                
                jnz outra_coluna10            ; Quando for 0 pula linha
           
            inc bx                      ; Adiciona 1 em bx = Linhas
                        
            pula_linha

            cmp ch, 7
            jne estetica2a

                pula_linha

            estetica2a:

            cmp ch, 4
            jne estetica02a

                pula_linha

            estetica02a:

            add bx, 9                   ; Adiciona para entender que estou indo para proxima linha
            dec ch                      ; Tira 1 do contador de linhas
            
        jnz outra_linha10


        ret
    imp_matriz_dificil endp

; Função de impressão de matrizes resposta
    imp_matriz_resposta_dificil proc

        xor bx, bx
        xor si, si

        mov ch, 9                              ; Contador de linhas                         
        xor dh,dh

        outra_linha10a:
        
            mov cl, 9                       ; Contador de colunas
            xor si, si    

                call espacao

                inc dh
                mov dl,dh
                add dl, 30h
                mov ah, 02
                int 21h
                mov ah,02
                mov dl, '>'
                int 21h

                espaco
                
                
                outra_coluna10a:   

                    mov ah, 02
                    mov dl, '|'
                    int 21h

                    mov ah, 02                 ; Printando numeros
                    mov dl, matriz_resposta_dificil[bx][si]                    
                    int 21h      
      
                    mov ah, 02
                    mov dl, '|'
                    int 21h

                    espaco

                    cmp cl, 7
                    jne estetica11

                        espaco

                    estetica11:

                    cmp cl, 4
                    jne estetica1aa

                        espaco

                    estetica1aa:

                    inc si                      ; passando para a proximo numero
                    dec cl                      ; Decrementa cl ( linha )
                
                jnz outra_coluna10a            ; Quando for 0 pula linha
           
            inc bx                      ; Adiciona 1 em bx = Linhas
                        
            pula_linha

            cmp ch, 7
            jne estetica2aa

                pula_linha

            estetica2aa:

            cmp ch, 4
            jne estetica02aa

                pula_linha

            estetica02aa:

            add bx, 9                   ; Adiciona para entender que estou indo para proxima linha
            dec ch                      ; Tira 1 do contador de linhas
            
        jnz outra_linha10a


        ret


        ret
    imp_matriz_resposta_dificil endp

; Entrada de colunas pra validação
    entra_coluna proc

        mov ah, 09
        lea dx, altera_coluna
        int 21h

        mov ah, 01
        int 21h                                 ; Selecionando as colunas letras de A a I

        mov coluna, al

        ret
    entra_coluna endp

; Entrada de linhas para validação
    entra_linha proc

        mov ah, 09
        lea dx, altera_linha
        int 21h

        mov ah, 01  
        int 21h                             ; Selecionando a linha numeros de ( 1 a 9 )

        mov linha, al

        ret
    entra_linha endp

; Função De alteração de valor
    altera_valor proc

        pula_linha

        outro_numero:

        mov ah, 09 
        lea dx, altera_valor1
        int 21h
        
        mov ah, 01                                  ; Selecionando um numero a ser trocado
        int 21h 

        mov valor, al

        call nivel_dificuldade                      

        cmp al, 31h
        jne facil                                   ; Verificando seu nivel de dificuldade

            mov al, valor                           ; Voltando o valor do numero selecionado para al e continuar o processo

            cmp al, matriz_facil[bx][si]            ; comparando para ver se não possui o mesmo número
            jne nao_igual

                pula_linha

                mov ah, 09 
                lea dx, ja_possui           ; Verificando se já possui o mesmo valor na determinada posição escolhida
                int 21h
                
                pula_linha

                jmp outro_numero

            nao_igual:
        
            mov matriz_facil[bx][si], al

            jmp fim_altera_dificuldade

        facil:

        cmp al, 32h
        jne medio

            mov al, valor

            cmp al, matriz_medio[bx][si]
            jne nao_igual1

                pula_linha

                mov ah, 09 
                lea dx, ja_possui       ; Verificando se já possui o mesmo valor na determinada posição escolhida
                int 21h
                
                pula_linha

                jmp outro_numero

            nao_igual1:
        
            mov matriz_medio[bx][si], al

            jmp fim_altera_dificuldade

        medio:

        fim_altera_dificuldade:
    ret
    altera_valor endp

; Passagem de registrador
    nivel_dificuldade proc

        mov al, dificuldade                             ; Jogando valor armazenado em dificuldade para AL para facilitar utiliza-lo

    ret
    nivel_dificuldade endp

; Verificando COLUNAS e LINHAS comando repetidos baseando todos na mesma anologia, comparações de colunas e linhas 
    coluna_a proc

        cmp coluna, 'a'
            jne coluna_0
            
                mov bx, 0
                pula_linha

                call entra_linha

                cmp linha, 31h
                jne linha_1

                    mov si, 0

                    call altera_valor
                    limpa_tela
                    jmp fim
                    
                linha_1:
                
                cmp linha, 32h
                jne linha_2

                    mov bx, 10
                    mov si, 0

                    call altera_valor
                    limpa_tela
                    jmp fim

                linha_2:

                cmp linha, 33h
                jne linha_3

                    mov bx, 20
                    mov si, 0

                    call altera_valor
                    limpa_tela
                    jmp fim

                linha_3:

            coluna_0:

            cmp coluna, 'a'
            jne coluna_00

                cmp linha, 34h
                jne linha_4

                    mov bx, 30
                    mov si, 0

                    call altera_valor
                    limpa_tela
                    jmp fim

                linha_4:

                cmp linha, 35h
                jne linha_5

                    mov bx, 40
                    mov si, 0

                    call altera_valor
                    limpa_tela
                    jmp fim

                linha_5:

                cmp linha, 36h
                jne linha_6

                    mov bx, 50
                    mov si, 0

                    call altera_valor
                    limpa_tela
                    jmp fim

                linha_6:

            coluna_00:

            cmp coluna, 'a'
            jne coluna_000

                cmp linha, 37h
                jne linha_7

                    mov bx, 60
                    mov si, 0

                    call altera_valor
                    limpa_tela
                    jmp fim

                linha_7:

                cmp linha, 38h
                jne linha_8

                    mov bx, 70
                    mov si, 0

                    call altera_valor
                    limpa_tela
                    jmp fim

                linha_8:

                cmp linha, 39h
                jne linha_9

                    mov bx, 80
                    mov si, 0

                    call altera_valor
                    limpa_tela
                    jmp fim

                linha_9:

            coluna_000:

        fim:
        ret
    coluna_a endp

    coluna_b proc

        mov al, coluna
        cmp al, 'b'
            jne coluna_1
                
                mov bx, 0

                pula_linha

                call entra_linha

                cmp linha, 31h
                jne linha_11

                    mov si, 1
                    call altera_valor
                    limpa_tela
                    jmp fim1

                linha_11:

                cmp linha, 32h
                jne linha_22

                    mov bx, 10
                    mov si, 1
                    call altera_valor
                    limpa_tela
                    jmp fim
                
                linha_22:

                cmp linha, 33h
                jne linha_33

                    mov bx, 20
                    mov si, 1
                    call altera_valor
                    limpa_tela
                    jmp fim1
                
                linha_33:

            coluna_1:

            cmp coluna, 'b'
            jne coluna_11

                cmp linha, 34h
                jne linha_44

                    mov bx, 30
                    mov si, 1
                    call altera_valor
                    limpa_tela
                    jmp fim1
                
                linha_44:

                cmp linha, 35h
                jne linha_55

                    mov bx, 40
                    mov si, 1
                    call altera_valor
                    limpa_tela
                    jmp fim1
                
                linha_55:  

                cmp linha, 36h
                jne linha_66

                    mov bx, 50
                    mov si, 1
                    call altera_valor
                    limpa_tela
                    jmp fim1

                linha_66: 


            coluna_11:

            cmp coluna, 'b'
            jne coluna_111

                cmp linha, 37h
                jne linha_77

                    mov bx, 60
                    mov si, 1
                    call altera_valor
                    limpa_tela
                    jmp fim1
                
                linha_77:

                cmp linha, 38h
                jne linha_88

                    mov bx, 70
                    mov si, 1
                    call altera_valor
                    limpa_tela
                    jmp fim1
                
                linha_88:  

                cmp linha, 39h
                jne linha_99

                    mov bx, 80
                    mov si, 1
                    call altera_valor
                    limpa_tela
                    jmp fim1

                linha_99: 

        coluna_111:

    fim1:
    ret
    coluna_b endp

    coluna_c proc

        cmp coluna, 'c'
        jne coluna_2

            mov bx, 0

            pula_linha

            call entra_linha

            cmp linha, 31h
            jne linha_111

                mov si, 2
                call altera_valor
                limpa_tela
                jmp fim2

            linha_111:

            cmp linha, 32h
            jne linha_222

                mov bx, 10
                mov si, 2
                call altera_valor
                limpa_tela
                jmp fim2
            
            linha_222:

            cmp linha, 33h
            jne linha_333

                mov bx, 20
                mov si, 2
                call altera_valor
                limpa_tela
                jmp fim2
            
            linha_333:

        coluna_2:

        cmp coluna, 'c'
        jne coluna_22


            cmp linha, 34h
            jne linha_1111

                mov bx, 30
                mov si, 2
                call altera_valor
                limpa_tela
                jmp fim2

            linha_1111:

            cmp linha, 35h
            jne linha_2222

                mov bx, 40
                mov si, 2
                call altera_valor
                limpa_tela
                jmp fim2
            
            linha_2222:

            cmp linha, 36h
            jne linha_3333

                mov bx, 50
                mov si, 2
                call altera_valor
                limpa_tela
                jmp fim2
            
            linha_3333:

        coluna_22:

        cmp coluna, 'c'
        jne coluna_222

            cmp linha, 37h
            jne linha_11111

                mov bx, 60
                mov si, 2
                call altera_valor
                limpa_tela
                jmp fim2

            linha_11111:

            cmp linha, 38h
            jne linha_22222

                mov bx, 70
                mov si, 2
                call altera_valor
                limpa_tela
                jmp fim2
            
            linha_22222:

            cmp linha, 39h
            jne linha_33333

                mov bx, 80
                mov si, 2
                call altera_valor
                limpa_tela
                jmp fim2
            
            linha_33333:

        coluna_222:

    fim2:
    ret
    coluna_c endp

    coluna_d proc

        mov al, coluna

        cmp al, 'd'
        jne coluna_3

            mov bx, 0

            pula_linha

            call entra_linha

            cmp linha, 31h
            jne linha_111111

                mov si, 3
                call altera_valor
                limpa_tela
                jmp fim3

            linha_111111:

            cmp linha, 32h
            jne linha_222222

                mov bx, 10
                mov si, 3
                call altera_valor
                limpa_tela
                jmp fim3
            
            linha_222222:

            cmp linha, 33h
            jne linha_333333

                mov bx, 20
                mov si, 3
                call altera_valor
                limpa_tela
                jmp fim3
            
            linha_333333:

        coluna_3:

        
        cmp coluna, 'd'
        jne coluna_33

    
            cmp linha, 34h
            jne linha_1111111

                mov bx, 30
                mov si, 3
                call altera_valor
                limpa_tela
                jmp fim3

            linha_1111111:

            cmp linha, 35h
            jne linha_2222222

                mov bx, 40
                mov si, 3
                call altera_valor
                limpa_tela
                jmp fim3
            
            linha_2222222:

            cmp linha, 36h
            jne linha_3333333

                mov bx, 50
                mov si, 3
                call altera_valor
                limpa_tela
                jmp fim3
            
            linha_3333333:

        coluna_33:

        mov al, coluna
        cmp al, 'd'
        jne coluna_333


            cmp linha, 37h
            jne linha_11111111

                mov bx, 60
                mov si, 3
                call altera_valor
                limpa_tela
                jmp fim3

            linha_11111111:

            cmp linha, 38h
            jne linha_22222222

                mov bx, 70
                mov si, 3
                call altera_valor
                limpa_tela
                jmp fim3
            
            linha_22222222:

            cmp linha, 39h
            jne linha_33333333

                mov bx, 80
                mov si, 3
                call altera_valor
                limpa_tela
                jmp fim3
            
            linha_33333333:

        coluna_333:


        fim3:
        ret
    coluna_d endp

    coluna_e proc

        mov al, coluna
        cmp al, 'e'
        jne coluna_4

            mov bx, 0

            pula_linha

            call entra_linha

            cmp linha, 31h
            jne linha_111111111

                mov si, 4
                call altera_valor
                limpa_tela
                jmp fim4

            linha_111111111:

            cmp linha, 32h
            jne linha_222222222

                mov bx, 10
                mov si, 4
                call altera_valor
                limpa_tela
                jmp fim4
            
            linha_222222222:

            cmp linha, 33h
            jne linha_333333333

                mov bx, 20
                mov si, 4
                call altera_valor
                limpa_tela
                jmp fim4
            
            linha_333333333:

        coluna_4:

        
        cmp coluna, 'e'
        jne coluna_44

    
            cmp linha, 34h
            jne linha_1111111111

                mov bx, 30
                mov si, 4
                call altera_valor
                limpa_tela
                jmp fim4

            linha_1111111111:

            cmp linha, 35h
            jne linha_2222222222

                mov bx, 40
                mov si, 4
                call altera_valor
                limpa_tela
                jmp fim4
            
            linha_2222222222:

            cmp linha, 36h
            jne linha_3333333333

                mov bx, 50
                mov si, 4
                call altera_valor
                limpa_tela
                jmp fim4
            
            linha_3333333333:

        coluna_44:

        mov al, coluna
        cmp al, 'e'
        jne coluna_444


            cmp linha, 37h
            jne linha_11111111111

                mov bx, 60
                mov si, 4
                call altera_valor
                limpa_tela
                jmp fim4

            linha_11111111111:

            cmp linha, 38h
            jne linha_22222222222

                mov bx, 70
                mov si, 4
                call altera_valor
                limpa_tela
                jmp fim4
            
            linha_22222222222:

            cmp linha, 39h
            jne linha_33333333333

                mov bx, 80
                mov si, 4
                call altera_valor
                limpa_tela
                jmp fim4
            
            linha_33333333333:

        coluna_444:


        fim4:
        ret
    coluna_e endp

    coluna_f proc

        mov al, coluna
        cmp al, 'f'
        jne coluna_5

            mov bx, 0

            pula_linha

            call entra_linha

            cmp linha, 31h
            jne linha_111111111111

                mov si, 5
                call altera_valor
                limpa_tela
                jmp fim5

            linha_111111111111:

            cmp linha, 32h
            jne linha_222222222222

                mov bx, 10
                mov si, 5
                call altera_valor
                limpa_tela
                jmp fim5
            
            linha_222222222222:

            cmp linha, 33h
            jne linha_333333333333

                mov bx, 20
                mov si, 5
                call altera_valor
                limpa_tela
                jmp fim5
            
            linha_333333333333:

        coluna_5:

        
        cmp coluna, 'f'
        jne coluna_55

    
            cmp linha, 34h
            jne linha_1111111111111

                mov bx, 30
                mov si, 5
                call altera_valor
                limpa_tela
                jmp fim5

            linha_1111111111111:

            cmp linha, 35h
            jne linha_2222222222222

                mov bx, 40
                mov si, 5
                call altera_valor
                limpa_tela
                jmp fim5
            
            linha_2222222222222:

            cmp linha, 36h
            jne linha_3333333333333

                mov bx, 50
                mov si, 5
                call altera_valor
                limpa_tela
                jmp fim5
            
            linha_3333333333333:

        coluna_55:

        mov al, coluna
        cmp al, 'f'
        jne coluna_555


            cmp linha, 37h
            jne linha_11111111111111

                mov bx, 60
                mov si, 5
                call altera_valor
                limpa_tela
                jmp fim5

            linha_11111111111111:

            cmp linha, 38h
            jne linha_22222222222222

                mov bx, 70
                mov si, 5
                call altera_valor
                limpa_tela
                jmp fim5
            
            linha_22222222222222:

            cmp linha, 39h
            jne linha_33333333333333

                mov bx, 80
                mov si, 5
                call altera_valor
                limpa_tela
                jmp fim5
            
            linha_33333333333333:

        coluna_555:


        fim5:

        ret
    coluna_f endp

    coluna_g proc

        mov al, coluna
        cmp al, 'g'
        jne coluna_6

            mov bx, 0

            pula_linha

            call entra_linha

            cmp linha, 31h
            jne linha_111111111111111

                mov si, 6
                call altera_valor
                limpa_tela
                jmp fim6

            linha_111111111111111:

            cmp linha, 32h
            jne linha_222222222222222

                mov bx, 10
                mov si, 6
                call altera_valor
                limpa_tela
                jmp fim6
            
            linha_222222222222222:

            cmp linha, 33h
            jne linha_333333333333333

                mov bx, 20
                mov si, 6
                call altera_valor
                limpa_tela
                jmp fim6
            
            linha_333333333333333:

        coluna_6:

        
        cmp coluna, 'g'
        jne coluna_66

    
            cmp linha, 34h
            jne linha_1111111111111111

                mov bx, 30
                mov si, 6
                call altera_valor
                limpa_tela
                jmp fim6

            linha_1111111111111111:

            cmp linha, 35h
            jne linha_2222222222222222

                mov bx, 40
                mov si, 6
                call altera_valor
                limpa_tela
                jmp fim6
            
            linha_2222222222222222:

            cmp linha, 36h
            jne linha_3333333333333333

                mov bx, 50
                mov si, 6
                call altera_valor
                limpa_tela
                jmp fim6
            
            linha_3333333333333333:

        coluna_66:

        mov al, coluna
        cmp al, 'g'
        jne coluna_666


            cmp linha, 37h
            jne linha_11111111111111111

                mov bx, 60
                mov si, 6
                call altera_valor
                limpa_tela
                jmp fim6

            linha_11111111111111111:

            cmp linha, 38h
            jne linha_22222222222222222

                mov bx, 70
                mov si, 6
                call altera_valor
                limpa_tela
                jmp fim6
            
            linha_22222222222222222:

            cmp linha, 39h
            jne linha_33333333333333333

                mov bx, 80
                mov si, 6
                call altera_valor
                limpa_tela
                jmp fim6
            
            linha_33333333333333333:

        coluna_666:


        fim6:

        ret
    coluna_g endp

    coluna_h proc

        mov al, coluna
        cmp al, 'h'
        jne coluna_7

            mov bx, 0

            pula_linha

            call entra_linha

            cmp linha, 31h
            jne linha_111111111111111111

                mov si, 7
                call altera_valor
                limpa_tela
                jmp fim7

            linha_111111111111111111:

            cmp linha, 32h
            jne linha_222222222222222222

                mov bx, 10
                mov si, 7
                call altera_valor
                limpa_tela
                jmp fim7
            
            linha_222222222222222222:

            cmp linha, 33h
            jne linha_333333333333333333

                mov bx, 20
                mov si, 7
                call altera_valor
                limpa_tela
                jmp fim7
            
            linha_333333333333333333:

        coluna_7:

        
        cmp coluna, 'h'
        jne coluna_77

    
            cmp linha, 34h
            jne linha_1111111111111111111

                mov bx, 30
                mov si, 7
                call altera_valor
                limpa_tela
                jmp fim7

            linha_1111111111111111111:

            cmp linha, 35h
            jne linha_2222222222222222222

                mov bx, 40
                mov si, 7
                call altera_valor
                limpa_tela
                jmp fim7
            
            linha_2222222222222222222:

            cmp linha, 36h
            jne linha_3333333333333333333

                mov bx, 50
                mov si, 7
                call altera_valor
                limpa_tela
                jmp fim7
            
            linha_3333333333333333333:

        coluna_77:

        mov al, coluna
        cmp al, 'h'
        jne coluna_777


            cmp linha, 37h
            jne linha_11111111111111111111

                mov bx, 60
                mov si, 7
                call altera_valor
                limpa_tela
                jmp fim7

            linha_11111111111111111111:

            cmp linha, 38h
            jne linha_22222222222222222222

                mov bx, 70
                mov si, 7
                call altera_valor
                limpa_tela
                jmp fim7
            
            linha_22222222222222222222:

            cmp linha, 39h
            jne linha_33333333333333333333

                mov bx, 80
                mov si, 7
                call altera_valor
                limpa_tela
                jmp fim7
            
            linha_33333333333333333333:

        coluna_777:


        fim7:

        ret
    coluna_h endp

    coluna_i proc

        mov al, coluna
        cmp al, 'i'
        jne coluna_8

            mov bx, 0

            pula_linha

            call entra_linha

            cmp linha, 31h
            jne linha_111111111111111111111

                mov si, 8
                call altera_valor
                limpa_tela
                jmp fim8

            linha_111111111111111111111:

            cmp linha, 32h
            jne linha_222222222222222222222

                mov bx, 10
                mov si, 8
                call altera_valor
                limpa_tela
                jmp fim8
            
            linha_222222222222222222222:

            cmp linha, 33h
            jne linha_333333333333333333333

                mov bx, 20
                mov si, 8
                call altera_valor
                limpa_tela
                jmp fim8
            
            linha_333333333333333333333:

        coluna_8:

        
        cmp coluna, 'i'
        jne coluna_88

    
            cmp linha, 34h
            jne linha_1111111111111111111111

                mov bx, 30
                mov si, 8
                call altera_valor
                limpa_tela
                jmp fim8

            linha_1111111111111111111111:

            cmp linha, 35h
            jne linha_2222222222222222222222

                mov bx, 40
                mov si, 8
                call altera_valor
                limpa_tela
                jmp fim8
            
            linha_2222222222222222222222:

            cmp linha, 36h
            jne linha_3333333333333333333333

                mov bx, 50
                mov si, 8
                call altera_valor
                limpa_tela
                jmp fim8
            
            linha_3333333333333333333333:

        coluna_88:

        mov al, coluna
        cmp al, 'i'
        jne coluna_888


            cmp linha, 37h
            jne linha_11111111111111111111111

                mov bx, 60
                mov si, 8
                call altera_valor
                limpa_tela
                jmp fim8

            linha_11111111111111111111111:

            cmp linha, 38h
            jne linha_22222222222222222222222

                mov bx, 70
                mov si, 8
                call altera_valor
                limpa_tela
                jmp fim8
            
            linha_22222222222222222222222:

            cmp linha, 39h
            jne linha_33333333333333333333333

                mov bx, 80
                mov si, 8
                call altera_valor
                limpa_tela
                jmp fim8
            
            linha_33333333333333333333333:

        coluna_888:


        fim8:

        ret
    coluna_i endp

    coluna_a_facil proc
        
        mov al, coluna
        cmp al, 'a'
            jne coluna_01
            
                mov bx, 0
                pula_linha

                call entra_linha

                cmp linha, 31h
                jne linha_01

                    mov si, 0

                    call altera_valor
                    limpa_tela
                    jmp fim01
                    
                linha_01:
                
                cmp linha, 32h
                jne linha_02

                    mov bx, 5
                    mov si, 0

                    call altera_valor
                    limpa_tela
                    jmp fim01

                linha_02:

                cmp linha, 33h
                jne linha_03

                    mov bx, 10
                    mov si, 0

                    call altera_valor
                    limpa_tela
                    jmp fim01

                linha_03:

            coluna_01:
            
            mov al, coluna
            cmp al, 'a'
            jne coluna_001
                cmp linha, 34h
                jne linha_04

                    mov bx, 15
                    mov si, 0

                    call altera_valor
                    limpa_tela
                    jmp fim01

                linha_04:

            coluna_001:

        fim01:

        ret
    coluna_a_facil endp

    coluna_b_facil proc
    
        cmp coluna, 'b'
            jne coluna_02
            
                mov bx, 0
                pula_linha

                call entra_linha

                cmp linha, 31h
                jne linha_001

                    mov si, 1

                    call altera_valor
                    limpa_tela
                    jmp fim02
                    
                linha_001:
                
                cmp linha, 32h
                jne linha_002

                    mov bx, 5
                    mov si, 1

                    call altera_valor
                    limpa_tela
                    jmp fim02

                linha_002:

                cmp linha, 33h
                jne linha_003

                    mov bx, 10
                    mov si, 1

                    call altera_valor
                    limpa_tela
                    jmp fim02

                linha_003:

            coluna_02:
            
            cmp coluna, 'b'
            jne coluna_002
                cmp linha, 34h
                jne linha_004

                    mov bx, 15
                    mov si, 1

                    call altera_valor
                    limpa_tela
                    jmp fim02

                linha_004:

            coluna_002:

        fim02:


    ret
    coluna_b_facil endp

    coluna_c_facil proc
    
        cmp coluna, 'c'
            jne coluna_003
            
                mov bx, 0
                pula_linha

                call entra_linha

                cmp linha, 31h
                jne linha_0001

                    mov si, 2

                    call altera_valor
                    limpa_tela
                    jmp fim03
                    
                linha_0001:
                
                cmp linha, 32h
                jne linha_0002

                    mov bx, 5
                    mov si, 2

                    call altera_valor
                    limpa_tela
                    jmp fim03

                linha_0002:

                cmp linha, 33h
                jne linha_0003

                    mov bx, 10
                    mov si, 2

                    call altera_valor
                    limpa_tela
                    jmp fim03

                linha_0003:

            coluna_003:
            
            cmp coluna, 'c'
            jne coluna_0003
                cmp linha, 34h
                jne linha_0004

                    mov bx, 15
                    mov si, 2

                    call altera_valor
                    limpa_tela
                    jmp fim03

                linha_0004:

            coluna_0003:

        fim03:

    ret
    coluna_c_facil endp

    coluna_d_facil proc

        cmp coluna, 'd'
            jne coluna_00003
            
                mov bx, 0
                pula_linha

                call entra_linha

                cmp linha, 31h
                jne linha_00001

                    mov si, 3

                    call altera_valor
                    limpa_tela
                    jmp fim04
                    
                linha_00001:
                
                cmp linha, 32h
                jne linha_00002

                    mov bx, 5
                    mov si, 3

                    call altera_valor
                    limpa_tela
                    jmp fim04

                linha_00002:

                cmp linha, 33h
                jne linha_00003

                    mov bx, 10
                    mov si, 3

                    call altera_valor
                    limpa_tela
                    jmp fim04

                linha_00003:

            coluna_00003:
            
            cmp coluna, 'd'
            jne coluna_000003
                cmp linha, 34h
                jne linha_00004

                    mov bx, 15
                    mov si, 3

                    call altera_valor
                    limpa_tela
                    jmp fim04

                linha_00004:

            coluna_000003:

        fim04:

    ret
    coluna_d_facil endp


; Alteração dos valores com sua determinada coodernada indicada
    verifica_posicao proc 

        call entra_coluna        

            call coluna_a
    
            call coluna_b

            call coluna_c

            call coluna_d

            call coluna_e

            call coluna_f

            call coluna_g

            call coluna_h

            call coluna_i
           
        ret
    verifica_posicao endp
    verifica_posicao_facil proc

        call entra_coluna

            call coluna_a_facil

            call coluna_b_facil
            
            call coluna_c_facil

            call coluna_d_facil

    teste:
    ret
    verifica_posicao_facil endp

 Verifica as linhas e colunas com a reposta correta
    verifica_resposta_certa_facil proc

        xor bx, bx
        xor si, si

        mov ch, 4                               ; Contador de linhas                         

        outra_linhaF:
        
            mov cl, 4                       ; Contador de colunas
            xor si, si 

                outra_colunaF:   

                    xor dl, dl        
                    mov dl, matriz_facil[bx][si]     
                    mov matriz, dl               
                                            
                    call verifica_resposta_facil
                    cmp matriz, matriz_resposta
                    jne CONSEGUIU

                        mov ah,09
                        lea dx, vencedor
                        int 21h

                    CONSEGUIU:
                    



                    inc si                      ; passando para a proximo numero
                    dec cl                      ; Decrementa cl ( linha )
                
                jnz outra_colunaF            ; Quando for 0 pula linha
           
            inc bx                      ; Adiciona 1 em bx = Linhas
                        

            add bx, 4                    ; Adiciona para entender que estou indo para proxima linha
            dec ch                      ; Tira 1 do contador de linhas
            
        jnz outra_linhaF
       
         ret
    verifica_resposta_certa_facil endp

    verifica_resposta_facil proc

        xor bx, bx
        xor si, si

        mov ch, 4                               ; Contador de linhas                         

        outra_linhaFR:
        
            mov cl, 4                       ; Contador de colunas
            xor si, si 

                outra_colunaFR:   

                    xor dh, dh        
                    mov dh, matriz_facil[bx][si]     
                    mov matriz_resposta, dh               
                                            
                    call verifica_resposta_certa_facil

                    inc si                      ; passando para a proximo numero
                    dec cl                      ; Decrementa cl ( linha )
                
                jnz outra_colunaFR            ; Quando for 0 pula linha
           
            inc bx                      ; Adiciona 1 em bx = Linhas
                        

            add bx, 4                    ; Adiciona para entender que estou indo para proxima linha
            dec ch                      ; Tira 1 do contador de linhas
            
        jnz outra_linhaF

        ret
    verifica_resposta_facil endp

; Printa cabeçalho
    cabecalho1 proc

        mov ah, 09
        lea dx, cabecalho
        int 21h

        pula_linha

        mov ah, 09
        lea dx, Titulo                  ; Prints esteticos
        int 21h

        pula_linha

        mov ah, 09
        lea dx, cabecalho
        int 21h
        
        pula_linha


    ret
    cabecalho1 endp

; Printa regras
    regra proc

        pula_linha

        mov ah, 09
        lea dx, regras1
        int 21h

        pula_linha

        mov ah, 09
        lea dx, regras2                 ; Prints de regras do sudoku
        int 21h

        pula_linha

        mov ah, 09
        lea dx, regras3
        int 21h

        pula_linha
        pula_linha

        mov ah, 09 
        lea dx, cabecalho
        int 21h

        pula_linha
        pula_linha

        mov ah, 09 
        lea dx, press
        int 21h

        mov ah, 01
        int 21h                     ; Selecionar qualquer tecla para avançar no programa

        pula_linha
        pula_linha

        mov ah, 09 
        lea dx, cabecalho
        int 21h

        limpa_tela

        mov ah, 09 
        lea dx, seleciona_dificuldade   
        int 21h

        pula_linha

        mov ah, 09 
        lea dx, dificuldade_facil
        int 21h

        pula_linha

        mov ah, 09 
        lea dx, dificuldade_medio
        int 21h

        pula_linha

        mov ah, 09 
        lea dx, dificuldade_dificil
        int 21h

        pula_linha

        mov ah, 09 
        lea dx, pressione_um_numero
        int 21h

        mov ah, 01                                          ; Digita dificuldade ( 1 a 3 )
        int 21h

        mov dificuldade, al                             
        

        call nivel_dificuldade

    ret
    regra endp

; Validações para o uso da dificuldade, otimizando o processo não ficando algo muito extenso 
    valida_dificuldade proc 

        call nivel_dificuldade
        cmp al, 31h
        jne facil1

            call imp_matriz_facil
            jmp continua_programa

        facil1:                                         ; Imprime dificuldade através da dificuldade selecionada

        cmp al, 32h
        jne medio1

            call imp_matriz_medio
            jmp continua_programa

        medio1:

        continua_programa:

        cmp al, 33h
        jne dificil1

            call imp_matriz_dificil
            jmp continua_programa

        dificil1:
    ret
    valida_dificuldade endp

    valida_dificuldade_resposta proc

        call nivel_dificuldade
        cmp al, 31h
        jne facil01

            call imp_matriz_resposta_facil  
            jmp continua_programa0

        facil01:                                                ; Dependendo da dificuldade selecionada, altera no print da resposta

        cmp al, 32h
        jne medio01

            call imp_matriz_resposta_medio
            jmp continua_programa0

        medio01:

        cmp al, 33h
        jne dificil01

            call imp_matriz_resposta_dificil
            jmp continua_programa0

        dificil01:

        continua_programa0:

        ret
    valida_dificuldade_resposta endp

    valida_dificuldade_validacao proc

        call nivel_dificuldade
        cmp al, 31h
        jne facil001

            call verifica_posicao_facil
            jmp continua_programa01

        facil001:                                              ; Dependendo da dificuldade muda a verificação
                                                            
        cmp al, 32h
        jne medio001

            call verifica_posicao
            jmp continua_programa01

        medio001:

        cmp al, 33h
        jne dificil001

            call verifica_posicao
            jmp continua_programa01

        dificil001:

        continua_programa01:

    ret
    valida_dificuldade_validacao endp
    
    verifica_titulo proc

        call nivel_dificuldade
        cmp al, 31h
        jne facil0001

            mov ah, 09
            lea dx, letras_colunas_facil
            int 21h 
            jmp continua_programa001

        facil0001:                                              ; Dependendo da dificuldade muda a verificação
                                                            
        cmp al, 32h
        jne medio0001

            mov ah, 09
            lea dx, letras_colunas
            int 21h 
            jmp continua_programa001

        medio0001:

        cmp al, 33h
        jne dificil0001

            mov ah, 09
            lea dx, letras_colunas
            int 21h 
            jmp continua_programa001

        dificil0001:

        continua_programa001:

        ret
    verifica_titulo endp

    comeco_main proc

        mov ax, @data                       ; Segmento de data
        mov ds, ax

        limpa_tela

        call cabecalho1                     ; Prints
        call regra

        limpa_tela

        call cabecalho1

        call verifica_titulo                   ; Funcao de print de coordenadas

        pula_linha
        pula_linha

    ret
    comeco_main endp

; Encerramento
    encerra proc far

        mov ah, 09
        lea dx, encerramento
        int 21h

        mov ah, 01
        int 21h
        
        cmp al, 13
        je encerra1

            pula_linha

            call valida_dificuldade_validacao                   ; Quando selecionado <enter> programa é encerrado
            ;call verifica_resposta_certa

            jmp continua

        encerra1:

        limpa_tela

        call cabecalho1

        pula_linha
        
        call espacao

        mov ah, 09
        lea dx, resposta
        int 21h

        mov ah, 09
        lea dx, letras_colunas
        int 21h

        pula_linha
        pula_linha

        call valida_dificuldade_resposta                               ; PRINTS

        pula_linha
        mov ah, 09
        lea dx, obrigado
        int 21h

        pula_linha                                              ; PRINTS

        mov ah, 09 
        lea dx, jogar_novamente                     
        int 21h

        mov ah, 01
        int 21h

        cmp al, 's'
        jne sim

            jmp comeca_denovo                                     ; Verificando se o jogador deseja jogar outro jogo
                                                            
        sim:
        cmp al, 'S'
        jne sim1

            jmp comeca_denovo

        sim1:

        cmp al, 'n'
        jmp final

        final:                                                  ; Caso não, programa é encerrado

        mov ah, 4ch
        int 21h
    ret
    encerra endp

    main proc
    
        comeca_denovo:                      ; Vem da Função encerra para começar denovo o programa

        call comeco_main                    ; Jogado o começo para ficar com menos informação a main

        call valida_dificuldade               ; Verificando a dificulade do jogo!

        mov cx, 999                           ; Colocando uma quantidade de vezes sem limite de quantas vezes pode se alterar entre os valores das coordenadas
        outro_valor:
        
            pula_linha
            call valida_dificuldade_validacao       ; Verificando qual dificuldade
            
            continua:

                call cabecalho1                          ; Print

                call verifica_titulo                    ; print coordenadas

                pula_linha
                pula_linha

                call valida_dificuldade    

            call encerra
        
        loop outro_valor 
    

    main endp
END main
